// <auto-generated />
using System;
using DataBase.Statistics;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBase.Statistics.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataBase.Statistics.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Attendance", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("unique_identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("game_date");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("character varying(300)")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsDead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_dead");

                    b.Property<long>("UserSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_steam_id");

                    b.HasKey("UniqueIdentifier")
                        .HasName("pk_attendance");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_attendance_game_id");

                    b.HasIndex("UserSteamId")
                        .HasDatabaseName("ix_attendance_user_steam_id");

                    b.ToTable("attendance", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Damage", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("unique_identifier");

                    b.Property<Guid>("AttendanceUniqueIdentifier")
                        .HasColumnType("uuid")
                        .HasColumnName("attendance_unique_identifier");

                    b.Property<string>("BulletType")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("bullet_type");

                    b.Property<double>("DamageValue")
                        .HasColumnType("double precision")
                        .HasColumnName("damage_value");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("character varying(300)")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsVehicleKilled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vehicle_killed");

                    b.Property<Guid>("KillUniqueIdentifier")
                        .HasColumnType("uuid")
                        .HasColumnName("kill_unique_identifier");

                    b.Property<long>("KilledSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("killed_steam_id");

                    b.Property<long?>("MurdererSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("murderer_steam_id");

                    b.Property<bool>("TeamKill")
                        .HasColumnType("boolean")
                        .HasColumnName("team_kill");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.Property<string>("VehicleName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("vehicle_name");

                    b.Property<string>("Weapons")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("weapons");

                    b.HasKey("UniqueIdentifier")
                        .HasName("pk_damage");

                    b.HasIndex("AttendanceUniqueIdentifier")
                        .HasDatabaseName("ix_damage_attendance_unique_identifier");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_damage_game_id");

                    b.HasIndex("KillUniqueIdentifier")
                        .HasDatabaseName("ix_damage_kill_unique_identifier");

                    b.ToTable("damage", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Game", b =>
                {
                    b.Property<string>("GameId")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("game_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("map");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("server");

                    b.HasKey("GameId")
                        .HasName("pk_games");

                    b.HasIndex("Date")
                        .HasDatabaseName("ix_games_date");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Kill", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("unique_identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("character varying(300)")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsVehicleKilled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vehicle_killed");

                    b.Property<long?>("KilledSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("killed_steam_id");

                    b.Property<long?>("KilledUserSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("killed_user_steam_id");

                    b.Property<bool>("TeamKill")
                        .HasColumnType("boolean")
                        .HasColumnName("team_kill");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.Property<long>("UserSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_steam_id");

                    b.Property<string>("UserTag")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("user_tag");

                    b.Property<string>("VehicleName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("vehicle_name");

                    b.Property<string>("Weapons")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("weapons");

                    b.HasKey("UniqueIdentifier")
                        .HasName("pk_kills");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_kills_game_id");

                    b.HasIndex("KilledSteamId")
                        .HasDatabaseName("ix_kills_killed_steam_id");

                    b.HasIndex("KilledUserSteamId")
                        .HasDatabaseName("ix_kills_killed_user_steam_id");

                    b.HasIndex("UserSteamId")
                        .HasDatabaseName("ix_kills_user_steam_id");

                    b.ToTable("kills", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.MedicalInfo", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("unique_identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("GameId")
                        .IsRequired()
                        .HasColumnType("character varying(300)")
                        .HasColumnName("game_id");

                    b.Property<long>("HealerSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("healer_steam_id");

                    b.Property<double>("HealthPointsHealed")
                        .HasColumnType("double precision")
                        .HasColumnName("health_points_healed");

                    b.Property<int>("MedicalAffiliation")
                        .HasColumnType("integer")
                        .HasColumnName("medical_affiliation");

                    b.Property<int>("TimeSecond")
                        .HasColumnType("integer")
                        .HasColumnName("time_second");

                    b.Property<long?>("WoundedSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("wounded_steam_id");

                    b.HasKey("UniqueIdentifier")
                        .HasName("pk_medical_info");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_medical_info_game_id");

                    b.HasIndex("HealerSteamId")
                        .HasDatabaseName("ix_medical_info_healer_steam_id");

                    b.HasIndex("WoundedSteamId")
                        .HasDatabaseName("ix_medical_info_wounded_steam_id");

                    b.ToTable("medical_info", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Player", b =>
                {
                    b.Property<long>("SteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("steam_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SteamId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Tag")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tag");

                    b.HasKey("SteamId")
                        .HasName("pk_players");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_players_name");

                    b.HasIndex("Tag")
                        .HasDatabaseName("ix_players_tag");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Squad", b =>
                {
                    b.Property<string>("Tag")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tag");

                    b.Property<string>("CadetTag")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cadet_tag");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Tag")
                        .HasName("pk_squads");

                    b.ToTable("squads", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Version", b =>
                {
                    b.Property<long>("VersionNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("version_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("VersionNumber"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("VersionNumber")
                        .HasName("pk_versions");

                    b.ToTable("versions", (string)null);
                });

            modelBuilder.Entity("GamePlayer", b =>
                {
                    b.Property<string>("GamesGameId")
                        .HasColumnType("character varying(300)")
                        .HasColumnName("games_game_id");

                    b.Property<long>("PlayersSteamId")
                        .HasColumnType("bigint")
                        .HasColumnName("players_steam_id");

                    b.HasKey("GamesGameId", "PlayersSteamId")
                        .HasName("pk_game_player");

                    b.HasIndex("PlayersSteamId")
                        .HasDatabaseName("ix_game_player_players_steam_id");

                    b.ToTable("game_player", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Attendance", b =>
                {
                    b.HasOne("Domain.Statistics.Entities.Game", "Game")
                        .WithMany("Attendances")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attendance_replays_game_id");

                    b.HasOne("Domain.Statistics.Entities.Player", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserSteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attendance_players_user_steam_id");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Damage", b =>
                {
                    b.HasOne("Domain.Statistics.Entities.Attendance", "Attendance")
                        .WithMany("Damages")
                        .HasForeignKey("AttendanceUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_damage_attendance_attendance_unique_identifier");

                    b.HasOne("Domain.Statistics.Entities.Game", "Game")
                        .WithMany("Damages")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_damage_replays_game_id");

                    b.HasOne("Domain.Statistics.Entities.Kill", "Kill")
                        .WithMany("Damages")
                        .HasForeignKey("KillUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_damage_kills_kill_unique_identifier");

                    b.Navigation("Attendance");

                    b.Navigation("Game");

                    b.Navigation("Kill");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Kill", b =>
                {
                    b.HasOne("Domain.Statistics.Entities.Game", "Game")
                        .WithMany("Kills")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kills_replays_game_id");

                    b.HasOne("Domain.Statistics.Entities.Player", "KilledUser")
                        .WithMany("Deaths")
                        .HasForeignKey("KilledUserSteamId")
                        .HasConstraintName("fk_kills_players_killed_user_steam_id");

                    b.HasOne("Domain.Statistics.Entities.Player", "User")
                        .WithMany("Kills")
                        .HasForeignKey("UserSteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kills_players_user_steam_id");

                    b.Navigation("Game");

                    b.Navigation("KilledUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.MedicalInfo", b =>
                {
                    b.HasOne("Domain.Statistics.Entities.Game", "Game")
                        .WithMany("MedicalInfos")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_info_games_game_id");

                    b.HasOne("Domain.Statistics.Entities.Player", "Healer")
                        .WithMany("TreatmentToPlayer")
                        .HasForeignKey("HealerSteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medical_info_players_healer_steam_id");

                    b.HasOne("Domain.Statistics.Entities.Player", "Wounded")
                        .WithMany("TreatmentFromPlayer")
                        .HasForeignKey("WoundedSteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_medical_info_players_wounded_steam_id");

                    b.Navigation("Game");

                    b.Navigation("Healer");

                    b.Navigation("Wounded");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Player", b =>
                {
                    b.HasOne("Domain.Statistics.Entities.Squad", "Squad")
                        .WithMany("Players")
                        .HasForeignKey("Tag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_players_squads_tag");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("GamePlayer", b =>
                {
                    b.HasOne("Domain.Statistics.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_player_replays_games_game_id");

                    b.HasOne("Domain.Statistics.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersSteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_player_players_players_steam_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataBase.Statistics.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataBase.Statistics.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("DataBase.Statistics.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataBase.Statistics.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Attendance", b =>
                {
                    b.Navigation("Damages");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Game", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Damages");

                    b.Navigation("Kills");

                    b.Navigation("MedicalInfos");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Kill", b =>
                {
                    b.Navigation("Damages");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Player", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Deaths");

                    b.Navigation("Kills");

                    b.Navigation("TreatmentFromPlayer");

                    b.Navigation("TreatmentToPlayer");
                });

            modelBuilder.Entity("Domain.Statistics.Entities.Squad", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
